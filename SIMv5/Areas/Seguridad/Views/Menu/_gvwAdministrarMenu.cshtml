@using System.Security.Claims
@using System.Web
@using System.Web.UI.WebControls
@using SIM.Areas.Seguridad.Models
@{
    ClaimsPrincipal claimppal = ((ClaimsPrincipal)HttpContext.Current.User);
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "gvAdministrarMenu";
        settings.Caption = "Administración del menú";
        settings.CallbackRouteValues = new { Controller = "Menu", Action = "gvwAdministrarMenu" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Menu", Action = "gvwAdministrarMenuCrear" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Menu", Action = "gvwAdministrarMenuActualizar" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Menu", Action = "gvwAdministrarMenuEliminar" };
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.Width = Unit.Percentage(100);

        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.PageSizeItemSettings.Position = PagerPageSizePosition.Right;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowNewButtonInHeader = claimppal.IsInRole("CMENU");
        settings.CommandColumn.ShowDeleteButton = claimppal.IsInRole("EMENU");
        settings.CommandColumn.ShowEditButton = claimppal.IsInRole("AMENU");

        settings.KeyFieldName = "ID_FORMA";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Columns.Add(column =>
        {
            column.FieldName = "ID_FORMA";
            column.Caption = "Id";
            column.Width = Unit.Parse("50");
            column.ReadOnly = true;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ID_PADRE";
            column.Caption = "Item padre";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Settings.FilterMode = ColumnFilterMode.DisplayText;
            column.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = ModelsToListSeguridad.GetForma();
            comboBoxProperties.TextField = "S_NOMBRE";
            comboBoxProperties.ValueField = "ID_FORMA";
            comboBoxProperties.ValueType = typeof(int);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "S_NOMBRE";
            column.Caption = "Nombre";
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ORDEN";
            column.Caption = "Orden";
            column.Width = Unit.Parse("80");
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "S_VISIBLE_MENU";
            column.Caption = "Visible";
            column.Width = Unit.Parse("80");
            column.SetDataItemTemplateContent(c =>
            {
                Html.DevExpress().CheckBox(checkboxSettings =>
                {
                    checkboxSettings.Name = "cbvsv_" + c.KeyValue.ToString();
                    checkboxSettings.Checked = DataBinder.Eval(c.DataItem, "S_VISIBLE_MENU").ToString().ToUpper() == "1" ? true : false;
                    checkboxSettings.ClientEnabled = false;
                }).Render();
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "S_CONTROLADOR";
            column.Caption = "Controlador";
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "S_RUTA";
            column.Caption = "Url";
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()